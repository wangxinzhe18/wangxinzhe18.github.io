<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>鬼刀好看的壁纸</title>
    <url>/2023/03/14/6/</url>
    <content><![CDATA[<p><img src="https://img1.baidu.com/it/u=1535981841,1746583210&fm=253&fmt=auto&app=138&f=JPEG?w=800&h=500"></p>
<p><img src="https://clubimg.club.vmall.com/data/attachment/forum/202108/03/175806dmz4bybqxrny62fy.jpg" alt="img"></p>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fsafe-img.xhscdn.com%2Fbw1%2Fef21fac9-73aa-49a5-b6fe-28e65ebda23a%3FimageView2%2F2%2Fw%2F1080%2Fformat%2Fjpg&refer=http%3A%2F%2Fsafe-img.xhscdn.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1681390459&t=4aa9edb340230c4561389aeffb932141" alt="img"></p>
<p><img src="https://clubimg.club.vmall.com/data/attachment/forum/202102/12/185840rdvr2vtxgsbnnnrp.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>壁纸</category>
      </categories>
      <tags>
        <tag>jpg</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo个人博客基于Butterfly系列魔改</title>
    <url>/2023/03/20/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8EButterfly%E7%B3%BB%E5%88%97%E9%AD%94%E6%94%B9/</url>
    <content><![CDATA[<h1 id="首页分类磁贴新版-店长-✨"><a href="#首页分类磁贴新版-店长-✨" class="headerlink" title="首页分类磁贴新版(店长)✨"></a>首页分类磁贴新版(店长)✨</h1><p><strong>安装插件,在博客根目录<code>[Myblog]</code>下打开终端，运行以下指令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-categories-card --save</span><br></pre></td></tr></table></figure>

<p><strong>效果：</strong></p>
<p><img src="/2023/03/20/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8EButterfly%E7%B3%BB%E5%88%97%E9%AD%94%E6%94%B9/22.png"></p>
<p><strong>2.添加配置信息 具体写法如下</strong></p>
<p><strong>在配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code> 中添加以下代码</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-categories-card</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/a9131002/</span></span><br><span class="line"><span class="attr">categoryBar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">column:</span> <span class="string">odd</span> <span class="comment"># odd：3列 | even：4列</span></span><br><span class="line">  <span class="attr">row:</span> <span class="number">1</span> <span class="comment">#显示行数，默认两行，超过行数切换为滚动显示</span></span><br><span class="line">  <span class="attr">message:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">Ubuntu指南</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover1.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">玩转Win10</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover2.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">长篇小说连载</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover3.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">个人日记</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover4.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">诗词歌赋</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover5.webp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">descr:</span> <span class="string">杂谈教程</span></span><br><span class="line">      <span class="attr">cover:</span> <span class="string">https://assets.akilar.top/image/cover6.webp</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-categories-card@1.0.0/lib/categorybar.css</span></span><br></pre></td></tr></table></figure>



<h1 id="文章置顶滚动栏（店长）✨"><a href="#文章置顶滚动栏（店长）✨" class="headerlink" title="文章置顶滚动栏（店长）✨"></a>文章置顶滚动栏（店长）✨</h1><p><strong>效果如下：</strong></p>
<p><img src="/2023/03/20/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9F%BA%E4%BA%8EButterfly%E7%B3%BB%E5%88%97%E9%AD%94%E6%94%B9/23.png"></p>
<h3 id="1-安装插件-在博客根目录-BlogRoot-下打开终端，运行以下指令："><a href="#1-安装插件-在博客根目录-BlogRoot-下打开终端，运行以下指令：" class="headerlink" title="1.安装插件,在博客根目录[BlogRoot]下打开终端，运行以下指令："></a>1.安装插件,在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure>

<h3 id="添加配置信息，以下为写法示例"><a href="#添加配置信息，以下为写法示例" class="headerlink" title="添加配置信息，以下为写法示例"></a>添加配置信息，以下为写法示例</h3><p><strong>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure>

<h3 id="使用方法-在文章的front-matter中添加swiper-index配置项即可。"><a href="#使用方法-在文章的front-matter中添加swiper-index配置项即可。" class="headerlink" title="使用方法:在文章的front_matter中添加swiper_index配置项即可。"></a>使用方法:在文章的<code>front_matter</code>中添加<code>swiper_index</code>配置项即可。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure>

<h1 id="wowjs动画✨"><a href="#wowjs动画✨" class="headerlink" title="wowjs动画✨"></a>wowjs动画✨</h1><h3 id="1-安装插件-在博客根目录-BlogRoot-下打开终端，运行以下指令：-1"><a href="#1-安装插件-在博客根目录-BlogRoot-下打开终端，运行以下指令：-1" class="headerlink" title="1.安装插件,在博客根目录[BlogRoot]下打开终端，运行以下指令："></a>1.安装插件,在博客根目录<code>[BlogRoot]</code>下打开终端，运行以下指令：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure>

<h3 id="2-添加配置信息，以下为写法示例"><a href="#2-添加配置信息，以下为写法示例" class="headerlink" title="2.添加配置信息，以下为写法示例"></a>2.添加配置信息，以下为写法示例</h3><p><strong>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">wowjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制动画开关。true是打开，false是关闭</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span> <span class="comment">#过滤器优先级</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment">#移动端是否启用，默认移动端禁用</span></span><br><span class="line">  <span class="attr">animateitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">recent-post-item</span> <span class="comment">#必填项，需要添加动画的元素的class</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span> <span class="comment">#必填项，需要添加的动画</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">2s</span> <span class="comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">1s</span> <span class="comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">offset:</span> <span class="number">100</span> <span class="comment">#选填项，开始动画的距离（相对浏览器底部）</span></span><br><span class="line">      <span class="attr">iteration:</span> <span class="number">2</span> <span class="comment">#选填项，动画重复的次数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">card-widget</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span></span><br><span class="line">  <span class="attr">animate_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/animate.min.css</span></span><br><span class="line">  <span class="attr">wow_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow.min.js</span></span><br><span class="line">  <span class="attr">wow_init_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-wowjs/lib/wow_init.js</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署出现错误err: Error: Spawn failed解决方式</title>
    <url>/2023/03/15/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AFerr-Error-Spawn-failed%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>我们在部署Hexo博客过程中可能会遇到这个典型的错误</strong></p>
<span id="more"></span>

<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error: </span>Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\HexoMyblog\myblog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:513:28)</span><br><span class="line">    at ChildProcess.cp.emit (D:\HexoMyblog\myblog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解决方式1"><a href="#解决方式1" class="headerlink" title="解决方式1:"></a>解决方式1:</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span>hexo<span class="regexp">/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##执行</span></span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h3 id="解决方式2："><a href="#解决方式2：" class="headerlink" title="解决方式2："></a>解决方式2：</h3><p><strong>可能是你的git repo 配置的地址不正确，可以将http方式改为ssh方式</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span>hexo<span class="regexp">/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">##修改</span></span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line">type: git</span><br><span class="line"></span><br><span class="line">repo: https:<span class="regexp">//gi</span>thub.com<span class="regexp">/yourname/y</span>ourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>



<h3 id="解决方式3："><a href="#解决方式3：" class="headerlink" title="解决方式3："></a>解决方式3：</h3><p><strong>第一种跟第二种不行的话 才建议使用</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/src/</span>hexo<span class="regexp">/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入depoly文件夹</span></span><br><span class="line">cd .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##强制推送</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis单元测试</title>
    <url>/2023/03/14/Mybatis/</url>
    <content><![CDATA[<p><strong>友友们大家好，我是你们的小王同学😗😗<br>今天给大家打来的是 Mybatis实现单元测试<br>希望能给大家带来有用的知识<br>觉得小王写的不错的话麻烦动动小手 点赞👍 收藏⭐  评论📄<br>小王的主页：<a href="https://blog.csdn.net/weixin_59796310?spm=1000.2115.3001.5343">小王同学</a>🚗<br>小王的gitee：<a href="https://gitee.com/bitewang">小王同学🏩</a>🏩<br>小王的github：<a href="https://github.com/WANGxinzhe666">小王同学💦</a></strong></p>
<p>​<br><img src="https://img-blog.csdnimg.cn/2a39f99ca2854d6397688350329e4ede.png" alt="在这里插入图片描述"></p>
<p><strong>后端开发的流程 如上图就是Mybatis查询所有用户的功能</strong></p>
<span id="more"></span>

<p><strong>​<br>我们先封装一个User类</strong><br><strong>这里直接加入lombok的注解得到getter和setter方法~</strong></p>
<p><img src="https://img-blog.csdnimg.cn/4b2b91f0067842148f1919dd9be3623c.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Userinfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serializableId</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String photo; <span class="comment">// 头像</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createtime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatetime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加mapper接口"><a href="#添加mapper接口" class="headerlink" title="添加mapper接口"></a><strong>添加mapper接口</strong></h3><p><img src="https://img-blog.csdnimg.cn/65d7522c212946bba7d016dbe97b19f2.png" alt="在这里插入图片描述"></p>
<h3 id="添加UserMapper-xml"><a href="#添加UserMapper-xml" class="headerlink" title="添加UserMapper.xml"></a>添加UserMapper.xml</h3><p><img src="https://img-blog.csdnimg.cn/ce8b8febffe445bc99b2c6a2e5d1cc38.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getUserById&quot;</span> resultType=<span class="string">&quot;com.example.demo.entity.Userinfo&quot;</span>&gt;</span><br><span class="line">        select * from userinfo where id=$&#123;id&#125;</span><br><span class="line"></span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p><strong><code>UserMapper.xml</code> 查询所有⽤户的具体实现 sql</strong></p>
<p><strong>生成单元测试方法</strong></p>
<p><img src="https://img-blog.csdnimg.cn/a2cb486aceaa4d3bb73d19ba4fb42d7b.png" alt="在这里插入图片描述"></p>
<p>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 添加单元测试的业务代码</span></span><br><span class="line">  <span class="type">Userinfo</span> <span class="variable">userinfo</span> <span class="operator">=</span> userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(userinfo);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>​</p>
<p><strong>​类的前面一定要加<code>@SpringBootTest</code></strong></p>
<p><img src="https://img-blog.csdnimg.cn/0bdf0053c90b476388bd7fe382380050.png" alt="在这里插入图片描述"></p>
<p><strong>单元测试成功！</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring开发的常用模块</title>
    <url>/2023/03/14/SpringXml/</url>
    <content><![CDATA[<h3 id="Spring数据库连接配置"><a href="#Spring数据库连接配置" class="headerlink" title="Spring数据库连接配置"></a>Spring数据库连接配置</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>/sql?characterEncoding=utf8&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=GMT%<span class="number">2B8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper<span class="comment">/**Mapper.xml</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>


<h3 id="SSM常用配置"><a href="#SSM常用配置" class="headerlink" title="SSM常用配置"></a>SSM常用配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据库的连接字符串</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1/mycnblog?characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 设置 Mybatis 的 xml 保存路径</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment"># 配置打印 MyBatis 执行的 SQL</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"># 配置打印 MyBatis 执行的 SQL</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com:</span></span><br><span class="line">      <span class="attr">example:</span></span><br><span class="line">        <span class="attr">demo:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h3 id="Mybatis-xml模板"><a href="#Mybatis-xml模板" class="headerlink" title="Mybatis-xml模板"></a>Mybatis-xml模板</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>CODEFORCES习题</title>
    <url>/2023/03/14/codeforces/</url>
    <content><![CDATA[<h1 id="CODEFORCES习题"><a href="#CODEFORCES习题" class="headerlink" title="CODEFORCES习题"></a>CODEFORCES习题</h1><h2 id="Round-855-Div-3"><a href="#Round-855-Div-3" class="headerlink" title="Round 855 Div . 3"></a>Round 855 Div . 3</h2><h3 id="C-Powering-the-Hero-easy-version"><a href="#C-Powering-the-Hero-easy-version" class="headerlink" title="C Powering the Hero (easy version)"></a>C Powering the Hero (easy version)</h3><span id="more"></span>



<p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span> &gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++ ) &#123;</span><br><span class="line">        <span class="type">int</span> s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                ans += q.<span class="built_in">top</span>(); </span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">slove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D-Remove-Two-Letters"><a href="#D-Remove-Two-Letters" class="headerlink" title="D. Remove Two Letters"></a>D. Remove Two Letters</h2><p><strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> ans = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i + <span class="number">2</span> &lt; n; i++ ) &#123;</span><br><span class="line">        ans -= (s[i] == s[i + <span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">slove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie和Session的区别</title>
    <url>/2023/03/14/cookies/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/8ce52d1c7314485fa3db351bd0c9c955.gif#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cfb33329497c4746b6d094ce00c7bfaa.png#pic_center" alt="在这里插入图片描述"></p>
<blockquote>
<p> 💟💟前言<br> ​<br><strong>友友们大家好，我是你们的小王同学😗😗<br>今天给大家打来的是 Cookie和Session的区别<br>希望能给大家带来有用的知识<br>觉得小王写的不错的话麻烦动动小手 点赞👍 收藏⭐  评论📄<br>小王的主页：<a href="https://blog.csdn.net/weixin_59796310?spm=1000.2115.3001.5343">小王同学</a>🚗<br>小王的gitee：<a href="https://gitee.com/bitewang">小王同学🏩</a>🏩<br>小王的github：<a href="https://github.com/WANGxinzhe666">小王同学💦</a></strong></p>
</blockquote>
<ul>
<li><p><strong>​cookie是<code>客户端</code>的机制，Session是<code>服务器端</code>的机制</strong></p>
</li>
<li><p><strong><code>Cookie</code>和<code>Session</code>经常在一起配合使用。但是不是必须配合</strong></p>
</li>
<li><p><strong>完全可以用Cookie来保存一些数据在客户端 这些数据不一定是用户身份信息，也不一定是<code>token/sessionid</code></strong></p>
</li>
<li><p><strong>session 中的 token &#x2F;sessionid 也不需要非得通过<code>Cookie/Set-Cookie</code>传递</strong></p>
</li>
</ul>
<h2 id="HttpServletRequest-类中的相关方法"><a href="#HttpServletRequest-类中的相关方法" class="headerlink" title="HttpServletRequest 类中的相关方法"></a>HttpServletRequest 类中的相关方法</h2><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h2 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h2><p><strong>getSession() 描述 在服务器中获取会话，参数如果为true，则当不存在会话时新建会话，参数如果为&#x3D;&#x3D;false&#x3D;&#x3D;，则当不存在会话返回<code>null</code></strong></p>
<p><strong><code>getSession()</code> 描述 在服务器中获取会话，参数如果为true，则当不存在会话时新建会话，参数如果为false，则当不存在会话返回null</strong></p>
<h2 id="HttpServletResponse-类中的相关方法"><a href="#HttpServletResponse-类中的相关方法" class="headerlink" title="HttpServletResponse 类中的相关方法"></a>HttpServletResponse 类中的相关方法</h2><p><strong>方法 void addCookie（Cookie cookie） 描述 把指定的cookie添加到响应中</strong></p>
<h2 id="HttpSession-类中的相关方法"><a href="#HttpSession-类中的相关方法" class="headerlink" title="HttpSession 类中的相关方法"></a>HttpSession 类中的相关方法</h2><p><strong>一个HttpSession对象里面包含多个键值对。我们可以往HttpSession中存任何我们需要的信息。<br>方法<br><code>Object getAttribute(String name)</code><br>该方法返回在该session会话中具有指定名称的对象，如果没有指定名称的对象，则返回null<br>void setAttribute(String<br>name, Object value)<br>该方法使用的指定的名称绑定一个对象到该<code>session</code>会话<br>boolean isNew() 判断当前是否新创建的会话</strong></p>
<h2 id="Cookie类的相关方法"><a href="#Cookie类的相关方法" class="headerlink" title="Cookie类的相关方法"></a>Cookie类的相关方法</h2><p><strong>每个Cookie对象就是一个键值对 方法 String getName() 该方法返回cookie的名称 名称在创建后不能改变（这个值是Set-Cookie给浏览器的）</strong></p>
<p><strong><code>String getValue()</code> 该方法获取cookie关联的值</strong></p>
<p><strong>​HTTP 的 Cooke 字段中存储的实际上是多组键值对. 每个键值对在 Servlet 中都对应了一个 Cookie<br>对象.</strong></p>
<ul>
<li><p><strong>通过 HttpServletRequest.getCookies() 获取到请求中的一系列 Cookie 键值对.</strong></p>
</li>
<li><p><strong>通过 HttpServletResponse.addCookie() 可以向响应中添加新的 Cookie 键值对.</strong></p>
</li>
</ul>
<blockquote>
<p><strong>cookie的工作流程：<br>客户端访问服务器，服务器调用<code>response.addCookie()</code>方法，产生响应时，会产生set-cookie响应头，将cookie文本发送给客户端，客户端会将cookie文本保存起来，当客户端再次请求服务器时，会产生<code>cookie</code>请求头，将之前服务器发送的<code>cookie</code>信息，再发送给服务器，服务器就可以根据cookie信息跟踪客户端的状态。</strong></p>
</blockquote>
<p>​</p>
<p>​</p>
<p>​</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言实现一些简单的编程题</title>
    <url>/2023/03/16/c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A2%98/</url>
    <content><![CDATA[<h2 id="C语言程序设计题"><a href="#C语言程序设计题" class="headerlink" title="C语言程序设计题"></a>C语言程序设计题</h2><p><strong>有一函数 其函数关系如下, 试编程求对于每一自变量的函数值。</strong></p>
<p>   <strong>y &#x3D; x^2      (x&lt;0)</strong> </p>
<p><strong>y &#x3D;  -0.5x+10    （x&lt;10)</strong> </p>
<p>   <strong>y &#x3D; x-5</strong></p>
<span id="more"></span>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) y = x * x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; <span class="number">10</span>) y = <span class="number">-0.5</span> * x + <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">else</span> y = x - <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-输入10个学生的成绩，分别用函数实现。"><a href="#2-输入10个学生的成绩，分别用函数实现。" class="headerlink" title="2. 输入10个学生的成绩，分别用函数实现。"></a>2. 输入10个学生的成绩，分别用函数实现。</h2><p>​	<strong>(1) 求平均成绩；</strong></p>
<p>​	<strong>(2) 按分数高低进行排序并输出。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">average</span><span class="params">(<span class="type">int</span> b[])</span> &#123; <span class="comment">// 求平均成绩的函数</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> avg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</span><br><span class="line">    sum += b[i]; <span class="comment">// 计算成绩总和</span></span><br><span class="line">    avg = sum / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> avg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降序排列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">declinesort</span> <span class="params">(<span class="type">int</span> b[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="comment">// 确定比较趟数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果前一个元素小于后一个元素叫交换</span></span><br><span class="line">            <span class="keyword">if</span> (b[j] &lt; b[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = b[j];</span><br><span class="line">                b[j] = b[j + <span class="number">1</span>];</span><br><span class="line">                b[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>  a[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// int  n = sizeof(a) / sizeof(a[0]);</span></span><br><span class="line">    <span class="type">float</span> avg = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    avg = average(a);</span><br><span class="line">    <span class="comment">// 打印平均成绩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, avg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降序排列</span></span><br><span class="line">    declinesort(a, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="1-2-3-4-…-100"><a href="#1-2-3-4-…-100" class="headerlink" title="1+2+3+4+…+100"></a>1+2+3+4+…+100</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum +=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-输出m-n之间所有自然数的和"><a href="#1-输出m-n之间所有自然数的和" class="headerlink" title="1.输出m,n之间所有自然数的和"></a><strong>1.输出m,n之间所有自然数的和</strong></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap1</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 输出m,n之间所有自然数的和</span></span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入区间&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) swap(m,n);</span><br><span class="line">    <span class="keyword">if</span>(m &gt; n) swap1(&amp;m,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = m; i &lt;=n; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;m,n之间的自然数的和是:%d&quot;</span>,sum);</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断输入字符的字母的个数-以-结尾"><a href="#判断输入字符的字母的个数-以-结尾" class="headerlink" title="判断输入字符的字母的个数 以*结尾"></a>判断输入字符的字母的个数 以*结尾</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">10000</span>];</span><br><span class="line">    gets(a);</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a[i] != <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (a[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; a[i] &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现1-1000之间所有奇数的和并输出"><a href="#实现1-1000之间所有奇数的和并输出" class="headerlink" title="实现1 - 1000之间所有奇数的和并输出"></a>实现1 - 1000之间所有奇数的和并输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            sum +=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql insert注意事项</title>
    <url>/2023/03/14/mysql/</url>
    <content><![CDATA[<p>​</p>
<p>                                   目录💌​</p>
<p>                插入的数据应与字段的数据类型相同🎮</p>
<p>        在values列出的数据位置必须与被加入的列的排列位置相应🎮</p>
<p> </p>
<p>         字符和日期类型的数据应该包含在单引号中🎮</p>
<p> ​</p>
<p>        列可以插入空值 前提是该字段允许为空🎮</p>
<p>                列名后面可以添加多条记录🎮</p>
<p>          向表中的所有字段添加数据时，可以不写前面的字段名称🎮</p>
<p>                        默认值的使用🎮</p>
<p> </p>
<p>插入的数据应与字段的数据类型相同🎮<br>我们先创建一个goods表 </p>
<span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `goods`(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span> );</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>下面插入一条语句</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span>(id ,goods_name,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>很显然是不可以的 因为id是一个整型 接收不了abc的类型！ </p>
<p>小王同学打算再试着插入一条语句：
 </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span>(id ,goods_name,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p> </p>
<p>居然可以通过 原因是 <code>30</code>这个字符串可以转化成整型的 但是abc 跟文字也不行！ <br>数据的长度应该在列的规定范围内🎮
 </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span>(id ,goods_name,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">40</span>,<span class="string">&#x27;vivovivovivovivo手机&#x27;</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>


<p> 结果报错了error</p>
<p>在values列出的数据位置必须与被加入的列的排列位置相应🎮<br>insert into <code>goods</code>(id ,goods_name,price)<br>values (‘华为手机’,20,2000);
 </p>
<p>原因就是 排列位置不匹配导致的！！ <br>字符和日期类型的数据应该包含在单引号中🎮
 </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span>(id ,goods_name,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">40</span>,vivo手机,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p> <br>很显然是不行的！ 因为goods_name是一个varchar类型 是字符串要用单引号引起来</p>
<p>列可以插入空值 前提是该字段允许为空🎮</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span>(id ,goods_name,price)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">30</span>,<span class="string">&#x27;华为手机&#x27;</span>,<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<p>我们查看表 发现找到了</p>
<p>  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `goods`(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>
<p> <br>如果在属性后面加了 NOT NULL之后就不允许插入空值了！就会出现图片上的错误</p>
<p>列名后面可以添加多条记录🎮</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="symbol">`goods`</span></span><br><span class="line"><span class="keyword">values</span> (<span class="number">50</span>,<span class="string">&#x27;三星手机&#x27;</span>,<span class="number">2300</span>),(<span class="number">60</span>,<span class="string">&#x27;海尔手机&#x27;</span>,<span class="number">1900</span>);</span><br></pre></td></tr></table></figure>
<p> </p>
<p> 向表中的所有字段添加数据时，可以不写前面的字段名称🎮<br>我们再向goods表中添加两条数据</p>
<p>如下图：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> goods</span><br><span class="line"><span class="keyword">values</span>(<span class="number">90</span>,<span class="string">&#x27;苹果手机&#x27;</span>,<span class="number">5000</span>),(<span class="number">45</span>,<span class="string">&#x27;一加手机&#x27;</span>,<span class="number">4800</span>);</span><br><span class="line">然后<span class="keyword">select</span>*<span class="keyword">from</span> goods 表查看 成功了！</span><br></pre></td></tr></table></figure>



<p>默认值的使用🎮<br>我们可以指定某个列的默认值 ，可以在创建表时创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `goods8`(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `goods`(id,goods_name)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">60</span>,<span class="string">&#x27;格力手机&#x27;</span>);</span><br></pre></td></tr></table></figure>


<p>显然 price 默认给的就是100！ </p>
<p> 以上就是小王同学带给大家的insert注意事项 </p>
<p>觉得写的不错的话 小手给个三连吧！</p>
<p>谢谢大家这么好看还关注我！💟💟</p>
<p>                          </p>
<p>           </p>
<p>                </p>
<p>​</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程的知识点</title>
    <url>/2023/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="1-并发与并行🎊"><a href="#1-并发与并行🎊" class="headerlink" title="1.并发与并行🎊"></a>1.并发与并行🎊</h1><p><strong>并发：</strong><br><strong>指两个或多个事件在同一个时间段内发生。</strong></p>
<p><strong>并行:</strong><br><strong>并行：指两个或多个事件在同一时刻发生（同时发生）</strong></p>
<h1 id="2-线程与进程🎊"><a href="#2-线程与进程🎊" class="headerlink" title="2.线程与进程🎊"></a>2.线程与进程🎊</h1><h2 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h2><ul>
<li><strong>是指一个内存中运行的应用程序，每个进程都有一个<code>独立的内存空间</code>，一个应用程序可以同时运行<code>多个进程</code>；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从<code>创建</code>、<code>运行</code>到<code>消亡</code>的过程</strong>。</li>
</ul>
<h2 id="线程："><a href="#线程：" class="headerlink" title="线程："></a><strong>线程：</strong></h2><h1 id="线程的创建🎊"><a href="#线程的创建🎊" class="headerlink" title="线程的创建🎊"></a>线程的创建🎊</h1><p><strong>构造方法：</strong></p>
<ul>
<li><strong>public Thread() :分配一个新的线程对象</strong>。</li>
<li><strong>public Thread(String name) :分配一个指定名字的新的线程对象。</strong></li>
<li><strong>public Thread(Runnable target) :分配一个带有指定目标新的线程对象。</strong></li>
<li><strong>public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字</strong>。</li>
</ul>
<p><strong>一些常见的方法:</strong></p>
<ul>
<li><strong>public String getName() :获取当前线程名称。</strong></li>
<li><strong>public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</strong></li>
<li><strong>public void run() :此线程要执行的任务在此处定义代码。</strong></li>
<li><strong>public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</strong></li>
<li><strong>public static Thread currentThread() :返回对当前正在执行的线程对象的引用。</strong></li>
</ul>
<h2 id="wait（）方法🎊"><a href="#wait（）方法🎊" class="headerlink" title="wait（）方法🎊"></a>wait（）方法🎊</h2><ol>
<li><strong>wait方法的作用就是使当前执行的代码进行等待，wait()方法就是Object类的方法，该方法是用来将当前线程置入”预执行队列中”，并且在wait方法()所在的代码处停止执行，直到接到通知或被中断中止</strong></li>
<li><strong>wait方法只能在同步方法中或同步块中调用。如果调用的wait时，没有持有适当的锁，会抛出异常。</strong></li>
<li><strong>wait（）方法执行后，当前线程释放锁，线程与其它线程竞争重新获取锁</strong></li>
</ol>
<h2 id="notify（）-方法🎊"><a href="#notify（）-方法🎊" class="headerlink" title="notify（） 方法🎊"></a>notify（） 方法🎊</h2><p><strong>notify方法就是使停止的线程继续运行</strong></p>
<ol>
<li><strong>方法notify()也要在同步方法或同步块中调用，该方法是用来通知那些可能等待该对象的对象锁的其它线程，对其发出通知notify，并使它们重新获取该对象的对象锁。如果有多个线程等待，则有线程规划器随机挑选出一个呈wait状态的的线程。</strong></li>
<li><strong>在notify()方法后，当前线程不会马上释放该对象锁，要等到执行notify()方法的线程将程序执行完，也就是退出同步代码块之后才会释放对象锁。</strong></li>
</ol>
<h2 id="查看线程的运行状态🎊"><a href="#查看线程的运行状态🎊" class="headerlink" title="查看线程的运行状态🎊"></a>查看线程的运行状态🎊</h2><p><strong>线程有六种状态分别是：新建、运行、阻塞、等待、计时等待和终止</strong></p>
<p><strong>实现思路：</strong><br><strong>创建一个类;ThreadState,实现Runnable接口</strong><br><strong>定义三个方法：</strong></p>
<ul>
<li><strong>waitForASecond()：使当前线程等待0.5秒或其他线程调用notify()或notifyAll()方法</strong></li>
<li><strong>waitForYears();使当前线程永久等待，直到其他线程调用notify()或notifyAll()方法</strong></li>
<li><strong>notifyNow():唤醒由调用wait方法()进入等待状态的线程</strong></li>
</ul>
<h2 id="代码实现-✨"><a href="#代码实现-✨" class="headerlink" title="代码实现:✨"></a>代码实现:✨</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xiaowang.daily;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  小王同学；</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1.题目描述：</span></span><br><span class="line"><span class="comment"> * 题目：线程有6个状态：新建，运行，阻塞，等待，计时，等待和终止</span></span><br><span class="line"><span class="comment"> * new新进程时，线程处于新建状态。</span></span><br><span class="line"><span class="comment"> * 调用start()方法，线程处于运行状态</span></span><br><span class="line"><span class="comment"> * 对于一些含有时间参数的方法如Thread类的sleep方法()；可以使线程处于计时等待状态</span></span><br><span class="line"><span class="comment"> * 当run()方法运行完毕或出现异常时，线程处于终止状态。</span></span><br><span class="line"><span class="comment"> * 实现：查看线程的运行状态。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2.解题思路：</span></span><br><span class="line"><span class="comment"> * 创建一个类;ThreadState,实现Runnable接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 定义三个方法</span></span><br><span class="line"><span class="comment"> * .waitForASecond()：使当前线程等待0.5秒或其他线程调用notify()或notifyAll()方法</span></span><br><span class="line"><span class="comment"> * .waitForYears();使当前线程永久等待，直到其他线程调用notify()或notifyAll()方法</span></span><br><span class="line"><span class="comment"> * .notifyNow():唤醒由调用wait方法()进入等待状态的线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用Thread类的getState()方法，可以获得线程的状态</span></span><br><span class="line"><span class="comment"> * 该方法的返回值是Thread.state</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadState</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123; </span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">waitForASecond</span><span class="params">()</span><span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        wait(<span class="number">500</span>); <span class="comment">//使当前线程等待0.5秒或其他线程调用notify()或者notifyAll()方法</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">waitForYears</span><span class="params">()</span><span class="keyword">throws</span>  InterruptedException&#123;</span><br><span class="line">        wait();  <span class="comment">//使当前线程永久等待，直到其他线程调用notify()或notifyAll()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title function_">notifyNow</span><span class="params">()</span><span class="keyword">throws</span>  InterruptedException&#123;</span><br><span class="line">        notify(); <span class="comment">//唤醒由调用wait方法()进入等待状态的线程</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>); <span class="comment">//留时间打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            waitForASecond(); <span class="comment">//在新线程中运行waitForASecond();方法</span></span><br><span class="line">            waitForYears();   <span class="comment">//在新线程中运行waitForYears()方法</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xiaowang;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_67</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ThreadState state=<span class="keyword">new</span> <span class="title class_">ThreadState</span>(); <span class="comment">//创建state对象</span></span><br><span class="line">        Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(state); <span class="comment">//利用state对象创建Thread对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;新建线程:&quot;</span>+thread.getState()); <span class="comment">//输出线程状态</span></span><br><span class="line">        thread.start(); <span class="comment">//调用thread对象的start()方法，启动新线程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;启动线程:&quot;</span>+thread.getState()); <span class="comment">//输出线程状态</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);<span class="comment">//当前线程休眠0.1秒，使新线程运行waitForASecond（）方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;计时等待:&quot;</span>+thread.getState()); <span class="comment">//输出线程状态 </span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);<span class="comment">//当前线程休眠1秒，使新线程运行waitForYears()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;等待线程:&quot;</span>+thread.getState());<span class="comment">//输出线程状态</span></span><br><span class="line">        state.notifyNow();<span class="comment">//调用state的notifyNow()方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;唤醒线程:&quot;</span>+thread.getState());<span class="comment">//输出线程状态</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);;<span class="comment">//当前新线程休眠1秒，使新线程结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;终止线程:&quot;</span>+thread.getState()); <span class="comment">//输出进程状态  </span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/21/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/123.png"></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手带你安装sublime插件带你高效刷算法</title>
    <url>/2023/03/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%AE%89%E8%A3%85sublime%E6%8F%92%E4%BB%B6%E5%B8%A6%E4%BD%A0%E9%AB%98%E6%95%88%E5%88%B7%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="安装sublime-Text-3💦"><a href="#安装sublime-Text-3💦" class="headerlink" title="安装sublime Text 3💦"></a>安装sublime Text 3💦</h1><ol>
<li><strong>打开 [sublime text 3官网](<a href="https://www.sublimetext.com/download">Download - Sublime Text</a>)</strong></li>
<li><strong><code>windows32</code>位操作选择 <code>windows</code></strong></li>
<li><strong><code>windos64</code>位 选择<code>windows 64bit</code></strong></li>
</ol>
<p>​                                       <strong>傻瓜式安装即可~~</strong></p>
<p><img src="/2023/03/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%AE%89%E8%A3%85sublime%E6%8F%92%E4%BB%B6%E5%B8%A6%E4%BD%A0%E9%AB%98%E6%95%88%E5%88%B7%E7%AE%97%E6%B3%95/222.png"></p>
<ol>
<li><strong>打开软件，点击Preference，选择最底部的Package Control，出现查找栏。这里注意：如果点击Preference没有Package Control，可以选择按住快捷键<code>Shift+Ctrl+P</code>，也会出现查找栏。</strong></li>
<li><strong>下载完成后再次Ctrl + shift + P，调出框框，输入install，按回车，这时候就可以下载插件了</strong></li>
<li><strong>输入<code>cppfastOlympiccoding</code>，下载这个插件。</strong></li>
<li><strong>Ctrl + n 创建一个文件 后缀改为 <code>.cpp</code> 然后Ctrl + s保存即可~</strong></li>
<li><strong>保存之后就可以编写代码了，代码写完之后，Ctrl + alt + B就可以调出右侧栏运行了。用这个插件</strong></li>
<li><strong>一定是要配置了 MinGW配置了环境变量才能用哈</strong></li>
</ol>
<p><img src="/2023/03/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%AE%89%E8%A3%85sublime%E6%8F%92%E4%BB%B6%E5%B8%A6%E4%BD%A0%E9%AB%98%E6%95%88%E5%88%B7%E7%AE%97%E6%B3%95/123.png"></p>
<p><strong>快来跟王同学一起快乐的刷算法吧~❣</strong></p>
]]></content>
      <categories>
        <category>CF</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机OSI模型</title>
    <url>/2023/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BAOSI%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="计算机网络-OSI-模型"><a href="#计算机网络-OSI-模型" class="headerlink" title="计算机网络 OSI 模型"></a>计算机网络 OSI 模型</h2><p><strong><code>计算机网络 OSI 模型</code>（Open Systems Interconnection model）是一种概念模型，它表征并标准化电信或计算系统的通信功能，而不考虑其基础内部结构和技术。 其目标是<code>多种通信系统</code>与<code>标准协议</code>的互操作性。 该模型将通信系统划分为<code>抽象层</code>。 该模型的原始版本定义了<code>七层</code>。</strong><br><strong>一个图层服务于它上面的图层，并由它下面的图层提供服务。 例如，通过网络提供无差错通信的层提供其上方的应用程序所需的路径，而它调用下一个较低层来发送和接收包含该路径内容的数据包。 在同一图层上的<code>两个实例</code>通过该层中的<code>水平连接</code>进行<code>可视化连接</code>。</strong></p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltYWdlczIwMTguY25ibG9ncy5jb20vYmxvZy8xMTk1NDI3LzIwMTgwMy8xMTk1NDI3LTIwMTgwMzE3MTg1ODM5ODgxLTE3OTU4NTUzMDQucG5n.jpg" alt="img"></p>
<h2 id="ISO-x2F-OSI-参考模型–怎么来的？"><a href="#ISO-x2F-OSI-参考模型–怎么来的？" class="headerlink" title="ISO&#x2F;OSI 参考模型–怎么来的？"></a>ISO&#x2F;OSI 参考模型–怎么来的？</h2><span id="more"></span>
<p><strong>目的：支持异构网络系统的互联互通<br>国际标准化组织(ISO)于 1984 年提出开放系统互连（OSI）参考模型<br>但是 理论 成功！市场失败！</strong></p>
<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p><strong>物理层是网络通信所有层次中的最底层,支持着其它层次的实现。它是网络通信得以实现的物理介质并提供了基本的电气连接和系统功能,因此也称之为布线层。</strong><br><strong>物理层负责<code>传递</code>各层次之间所使用的信号,虽然这一层对用户来说无很大意义,然而,没有物理层的低级支援,任何通信都不可能被建立。</strong></p>
<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p><strong>两个系统间的通信最终是以建立在通信线路上的<code>数据流形式</code>实现的。数据链路层是十分关键的一层数据流处理层,它把所需传送的信息<code>打包</code>,将数据发送出去或接收另一系统传来的数据包进行处理。</strong></p>
<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p><strong>网络层可谓网络通信的小型控制中心,它根据<code>网络条件</code>、服务的优先权和其它因素来决定数据应使用那一条路由进行传送。网络层软件一般驻留于网络的交换器中,并且为应用软件提供了相应的数据控制接口。</strong></p>
<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><p><strong>在功能上,<code>传输层</code>完成了<code>大多数网络层</code>的操作,但大多只能在<code>本地执行</code>。这一层实现了强于<code>数据链路层</code>的系统调度功能,如寻找正确路由、检测故障等功能。它通过确保接受的数据具有正确的格式和次序而进行<code>传输质量控制</code>。这往往对不同的计算机之间的连接至关重要。</strong></p>
<h1 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h1><p><strong>会话层完成较<code>高层次上</code>的网络功能,使两个应用程序在<code>网络上通信</code>、<code>安全性操作</code>、名字识别、登录、管理以及其它一些类似的功能。值得一提的是,并非所有支持 051 的产品都可明确指明其专用于 OSI 模型的哪一层,如 NetBios、Namedpipes 等软件即实现了传输层功能,又完成了部分会话层的任务。为了扩充会话层应用标准,OSI 又开发了 <code>1508327 标准</code>,该标准是一个面向连接的会话协议规范。</strong></p>
<h1 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h1><p><strong>对该层最直观的理解可认为是屏幕上看到的<code>字符</code>、<code>图形</code>、<code>特殊数据格式</code>等。它主要完成屏幕和文件的格式化功能以实现程序员设计意图。</strong></p>
<h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><p><strong>与<code>前述六层不同</code>的是,应用层是<code>完全面向用户服务</code>的,它是用户与底层支撑软件的接口。许多网络应用软件、网络操作系统都是在该层次上的直接应用,如文件<code>打印机共享</code>、<code>电子邮件</code>、<code>记帐</code>等等功能。而且该层中的规范大多是新制订的,如 BIM 的系统应用体系(SAA)和用于电子邮件的 X.400 信息处理规范等。</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络原理</title>
    <url>/2023/03/15/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="独立模式"><a href="#独立模式" class="headerlink" title="独立模式"></a>独立模式</h2><blockquote>
<p>独立模式：计算机之间相互独立</p>
</blockquote>
<h2 id="网络互连"><a href="#网络互连" class="headerlink" title="网络互连"></a>网络互连</h2><span id="more"></span>

<p><strong>随着时代的发展，越来越需要计算机之间互相通信，共享软件和数据，即以多个计算机协同工作来完成</strong></p>
<p><strong>业务，就有了网络互连。</strong></p>
<p><strong>网络互连：将多台计算机连接在一起，完成数据共享。</strong></p>
<p><strong>数据共享本质是网络数据传输，即计算机之间通过网络来传输数据，也称为网络通信。</strong></p>
<p><strong>根据网络互连的规模不同，可以划分为局域网和广域网</strong></p>
<h2 id="局域网LAN"><a href="#局域网LAN" class="headerlink" title="局域网LAN"></a>局域网LAN</h2><p><strong>局域网，即 Local Area Network，简称LAN。</strong></p>
<p><strong>Local 即标识了局域网是本地，局部组建的一种私有网络。</strong></p>
<p><strong>比特就业课局域网内的主机之间能方便的进行网络通信，又称为内网；局域网和局域网之间在没有连接的情况下，</strong></p>
<p><strong>是无法通信的。</strong></p>
<p><strong>局域网组建网络的方式有很多种：</strong></p>
<p><strong>1.基于网线直连 2.基于集线器组建 3.基于交换机组建</strong></p>
<h2 id="广域网WAN"><a href="#广域网WAN" class="headerlink" title="广域网WAN"></a>广域网WAN</h2><p>广域网，即 Wide Area Network，简称WAN。</p>
<p>通过路由器，将多个局域网连接起来，在物理上组成很大范围的网络，就形成了广域网。广域网内部的</p>
<p>局域网都属于其子网。</p>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>概念</p>
<p>IP地址主要用于标识网络主机、其他网络设备（如路由器）的网络地址。简单说，IP地址用于定位主机</p>
<p>的网络地址。</p>
<p>就像我们发送快递一样，需要知道对方的收货地址，快递员才能将包裹送到目的地。</p>
<p>格式</p>
<p>IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节），如：</p>
<p>01100100.00000100.00000101.00000110。 特殊IP</p>
<blockquote>
<p>127.*的IP地址用于本机环回(loop back)测试，通常是127.0.0.1本机环回主要用于本机到本机的网络通信（系统内部为了性能，不会走网络的方式传输），对于开发网络通信的程序（即网络编程）而言，常见的开发方式都是本机到本机的网络通信。</p>
</blockquote>
<p>IP地址解决了网络通信时，定位网络主机的问题，但是还存在一个问题，传输到目的主机后，由哪个进</p>
<p>程来接收这个数据呢？这就需要端口号来标识。</p>
<h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>概念</p>
<p>在网络通信中，IP地址用于标识主机网络地址，端口号可以标识主机中发送数据、接收数据的进程。简</p>
<p>单说：端口号用于定位主机中的进程。</p>
<p>类似发送快递时，不光需要指定收货地址（IP地址），还需要指定收货人（端口号）。</p>
<p>格式</p>
<p>端口号是0~65535范围的数字，在网络通信中，进程可以通过绑定一个端口号，来发送及接收网络数</p>
<p>据。</p>
<p>注意事项</p>
<p>两个不同的进程，不能绑定同一个端口号，但一个进程可以绑定多个端口号。</p>
<h2 id="认识协议"><a href="#认识协议" class="headerlink" title="认识协议"></a>认识协议</h2><p>概念</p>
<p>协议，网络协议的简称，网络协议是网络通信（即网络数据传输）经过的所有网络设备都必须共同遵从</p>
<p>的一组约定、规则。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互</p>
<p>通信交流。通常由三要素组成：</p>
<p>比特就业课1. 语法：即数据与控制信息的结构或格式；</p>
<p>类似打电话时，双方要使用同样的语言：普通话</p>
<ol>
<li>语义：即需要发出何种控制信息，完成何种动作以及做出何种响应；</li>
</ol>
<p>语义主要用来说明通信双方应当怎么做。用于协调与差错处理的控制信息。</p>
<p>类似打电话时，说话的内容。一方道：你瞅啥？另一方就得有对应的响应：瞅你咋的！</p>
<ol>
<li>时序，即事件实现顺序的详细说明。</li>
</ol>
<p>时序定义了何时进行通信，先讲什么，后讲什么，讲话的速度等。比如是采用同步传输还是</p>
<p>异步传输。</p>
<p>女生和男生的通话，总是由男生主动发起通话，而总是在男生恋恋不舍的时候，由女生要求</p>
<p>结束通话。</p>
<p>协议（protocol）最终体现为在网络上传输的数据包的格式。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络面试题</title>
    <url>/2023/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h2><ul>
<li><p><strong>作用</strong><br><strong>GET用来获取资源，POST用于传输实体主体</strong></p>
</li>
<li><p>参数位置<br><strong>GET的参数放在URL中，POST的参数存储在实体主体中，并且GET方法提交的请求的URL中的数据多是2048字节，POST请求没有大小限制</strong></p>
<span id="more"></span>
</li>
<li><p><strong>安全性</strong><br><strong>GET方法因为参数放在URL中，安全性相对于POST较差一些</strong></p>
</li>
<li><p><strong>幂等性</strong></p>
</li>
</ul>
<p><strong>GET方法是具有幂等性的，而POST方法不具有幂等性。这里幂等性指客户端连续发出多次请求，收到的结果都是一样的.</strong></p>
<h2 id="什么是网络协议，为什么要对网络协议分层"><a href="#什么是网络协议，为什么要对网络协议分层" class="headerlink" title="什么是网络协议，为什么要对网络协议分层"></a>什么是网络协议，为什么要对网络协议分层</h2><p><strong>网络协议是计算机在通信过程中要遵循的一些约定好的规则</strong></p>
<p><strong>网络分层的原因</strong></p>
<ul>
<li><strong>易于<code>实现</code>和<code>维护</code>，因为各层之间都是独立的层与层之间不会收到影响</strong></li>
<li><strong>有利于标准化的制</strong></li>
</ul>
<h2 id="URI-和-URL的区别"><a href="#URI-和-URL的区别" class="headerlink" title="URI 和 URL的区别"></a>URI 和 URL的区别</h2><ul>
<li><strong>URI（Uniform Resources Identifier）：中文全称为统一资源标志符，主要作用是唯一标识一个资源</strong></li>
<li><strong>URL(Uniform Resources  Location):中文全称为统一资源定位符，主要作用是提供资源的路径。</strong></li>
</ul>
<h2 id="DNS的解析流程"><a href="#DNS的解析流程" class="headerlink" title="DNS的解析流程"></a>DNS的解析流程</h2><ol>
<li><strong>DNS是<code>分级别解析出IP地址的</code></strong></li>
</ol>
<ul>
<li><strong>根域名服务器： 只负责顶级域的解析</strong>；</li>
<li><strong>顶级域： .com、.gov（政府）、.cn（中国） .jp（日本）、 .kr（韩国）等通 过域名后缀来分类</strong></li>
<li><strong>二级域：下一级域</strong></li>
</ul>
<h2 id="TCP-和-UDP的区别"><a href="#TCP-和-UDP的区别" class="headerlink" title="TCP 和 UDP的区别"></a>TCP 和 UDP的区别</h2><ul>
<li><strong>TCP首部：前20个字节是固定的，后面有4n个字节根据需求而增加的选项，所以TCP首部最小的长度为20字节。</strong></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/02652e03d57a4c62a9bec0471708e6b9.png"><br>UDP的首部只有8个字节，源端口号、目的端口号、长度和校验各两个字节<br><img src="https://img-blog.csdnimg.cn/64970fa0978747369f22ba08e555f109.png"></p>
<table>
<thead>
<tr>
<th></th>
<th>是否面向连接</th>
<th>可靠性</th>
<th>传输形式</th>
<th>传输效率</th>
<th>消耗资源</th>
<th>应用场景</th>
<th>首部字节</th>
</tr>
</thead>
<tbody><tr>
<td>TCP</td>
<td>面向连接</td>
<td>可靠</td>
<td>字节流</td>
<td>慢</td>
<td>多</td>
<td>文件&#x2F;邮件传输</td>
<td>20~60</td>
</tr>
<tr>
<td>UDP</td>
<td>面向连接</td>
<td>不可靠</td>
<td>数据报文端</td>
<td>快</td>
<td>少</td>
<td>视频&#x2F;语言传输</td>
<td>8</td>
</tr>
</tbody></table>
<h2 id="常见的HTTP方法"><a href="#常见的HTTP方法" class="headerlink" title="常见的HTTP方法"></a>常见的HTTP方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>GET</code></td>
<td>获取资源</td>
</tr>
<tr>
<td><code>POST</code></td>
<td>传输实体主体</td>
</tr>
<tr>
<td><code>PUT </code></td>
<td>上传文件</td>
</tr>
<tr>
<td><code>DELETE</code></td>
<td>删除文件</td>
</tr>
<tr>
<td><code>HEAD</code></td>
<td>和GET方法类似，但只返回报文首部，不返回报文实体主体部分</td>
</tr>
<tr>
<td><code>PATCH </code></td>
<td>对资源进行部分修改</td>
</tr>
<tr>
<td><code>OPTIONS</code></td>
<td>查询指定的URL支持的方法</td>
</tr>
<tr>
<td><code>CONNCT </code></td>
<td>要去用隧道协议连接代理</td>
</tr>
<tr>
<td><code>TRACE</code></td>
<td>服务器会将通信路径返回给客户端</td>
</tr>
</tbody></table>
<h2 id="HTTPS的加密过程"><a href="#HTTPS的加密过程" class="headerlink" title="HTTPS的加密过程"></a>HTTPS的加密过程</h2><h3 id="HTTPS的加密过程："><a href="#HTTPS的加密过程：" class="headerlink" title="HTTPS的加密过程："></a>HTTPS的加密过程：</h3><p><strong>1.客户端向服务端发起第一次握手请求，告诉服务端客户端所支持的<code>SSL</code>的指定版本、加密算法及密钥长度等信息。</strong><br><strong>2.服务端将自己的公钥发给数字证书认证机构，数字证书认证机构利用自己的私钥对服务器的公钥进行数字签名，并给服务器颁发公钥证书。<br>3.服务端将证书发给客服端。</strong><br><strong>4.客服端利用数字认证机构的公钥，向数字证书认证机构验证公钥证书上的数字签名，确认服务器公开密钥的真实性。</strong><br><strong>5.客服端使用服务端的<code>公开密钥</code>加密自己生成的对称密钥，发给服务端</strong>。<br><strong>6.服务端收到后利用<code>私钥</code>解密信息，获得客户端发来的对称密钥。</strong><br><strong>7.通信双方可用<code>对称密钥</code>来加密解密信息。。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/38a1500d85374798b12423d01aa3a7f2.png"></p>
<h2 id="常用的HTTP状态码"><a href="#常用的HTTP状态码" class="headerlink" title="常用的HTTP状态码"></a>常用的HTTP状态码</h2><h2 id="1XX"><a href="#1XX" class="headerlink" title="1XX"></a>1XX</h2><ul>
<li><strong>100 Continue：表示正常，客户端可以继续发送请求</strong></li>
<li><strong>101 Switching Protocols：切换协议，服务器根据客户端的请求切换协议。</strong></li>
</ul>
<h2 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h2><ul>
<li><strong>200 OK：请求成功</strong></li>
<li><strong>201 cread ：已创建，表示成功请求并创建了新的资源</strong></li>
<li><strong>202 Accepted ： 已接收，已接收请求 但未处理完成。</strong></li>
<li><strong>204 No Content ：无内容，服务器成功处理，但未返回内容</strong></li>
<li><strong>205 Reset Content：重置内容，服务器处理成功，客户端应重置文档视图</strong></li>
<li><strong>206 Partial Content : 表示<code>客户端</code>进行了请求，响应报文包含Content-Range 指定范围的实体内容</strong></li>
</ul>
<h2 id="3XX"><a href="#3XX" class="headerlink" title="3XX"></a>3XX</h2><ul>
<li>3<strong>01 Moved Permanently：<code>永久性重定向</code></strong> </li>
<li><strong>302 Found：<code>临时重定向</code></strong> </li>
<li><strong>303 See Other：和301功能类似，但要求客户端采用<code>get</code>方法获取资源</strong> </li>
<li><strong>304 Not Modified：所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。</strong> </li>
<li><strong>305 Use Proxy：所请求的资源必须通过代理访问 307 Temporary Redirect：<br>临时重定向，与302类似，要求使用<code>get请求重定向</code>。</strong></li>
</ul>
<h2 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h2><ul>
<li><strong>400 Bad Request：客户端请求的语法错误，服务器无法理解。</strong></li>
<li><strong>401 Unauthorized：表示<code>发送的请求</code>需要有认证信息。</strong></li>
<li><strong>403 Forbidden：服务器理解用户的请求，但是拒绝执行该请求</strong></li>
<li><strong>404 Not Found：服务器无法根据客户端的请求找到资源。</strong> </li>
<li><strong>405 Method Not Allowed：客户端请求中的方法<code>被禁止</code></strong> </li>
<li><strong>406 Not Acceptable：服务器无法根据客户端请求的内容特性完成请求 408 Request<br>Time-out：服务器等待客户端发送的<code>请求时间过长</code>，超时</strong></li>
</ul>
<h2 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h2><ul>
<li><strong>500 Internal Server Error：服务器内部错误，无法完成请求</strong> </li>
<li><strong>501 Not Implemented：服务器不支持请求的功能，无法完成请求</strong></li>
</ul>
<p><strong><code>计算机网络 OSI 模型</code>（Open Systems Interconnection model）是一种概念模型，它表征并标准化电信或计算系统的通信功能，而不考虑其基础内部结构和技术。 其目标是<code>多种通信系统</code>与<code>标准协议</code>的互操作性。 该模型将通信系统划分为<code>抽象层</code>。 该模型的原始版本定义了<code>七层</code>。</strong><br><strong>一个图层服务于它上面的图层，并由它下面的图层提供服务。 例如，通过网络提供无差错通信的层提供其上方的应用程序所需的路径，而它调用下一个较低层来发送和接收包含该路径内容的数据包。 在同一图层上的<code>两个实例</code>通过该层中的<code>水平连接</code>进行<code>可视化连接</code>。</strong></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
